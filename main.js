!function(){"use strict";class e{constructor(e,t){var s,n,o;s=this,o=()=>this._inputElements.every((e=>e.validity.valid)),(n=function(e){var t=function(e,t){if("object"!=typeof e||null===e)return e;var s=e[Symbol.toPrimitive];if(void 0!==s){var n=s.call(e,"string");if("object"!=typeof n)return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==typeof t?t:String(t)}(n="_checkFormValidity"))in s?Object.defineProperty(s,n,{value:o,enumerable:!0,configurable:!0,writable:!0}):s[n]=o,this._formElement=e,this._inputSelector=t.inputSelector,this._submitButtonSelector=t.submitButtonSelector,this._inactiveButtonClass=t.inactiveButtonClass,this._inputErrorClass=t.inputErrorClass,this._errorClass=t.errorClass}_showInputError(e){const t=this._formElement.querySelector(`#${e.id}-error`);e.classList.add(this._inputErrorClass),t.textContent=e.validationMessage,t.classList.add(this._errorClass)}_hideInputError(e){const t=this._formElement.querySelector(`#${e.id}-error`);e.classList.remove(this._inputErrorClass),t.textContent="",t.classList.remove(this._errorClass)}_checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e)}_toggleButtonState(){this._checkFormValidity()?(this._submitButton.classList.remove(this._inactiveButtonClass),this._submitButton.disabled=!1):(this._submitButton.classList.add(this._inactiveButtonClass),this._submitButton.disabled=!0)}_setEventListeners(){this._inputElements=[...this._formElement.querySelectorAll(this._inputSelector)],this._submitButton=this._formElement.querySelector(this._submitButtonSelector),this._inputElements.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this._toggleButtonState(this._inputElements,this._submitButton)}))}))}resetValidation(){this._toggleButtonState(),this._inputElements.forEach((e=>{this._hideInputError(e)}))}enableValidation(){this._formElement.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners(this._formElement)}}class t{constructor(e,t,s){this._name=e.name,this._link=e.link,this._cardSelector=t,this._handleImageClick=s}_getTemplate(){return document.querySelector(this._cardSelector).content.firstElementChild.cloneNode(!0)}_handleLikeClick(){this.likeButton.classList.toggle("card__like-button_active")}_handleTrashClick(){this._element.remove()}_setEventListeners(){this.likeButton.addEventListener("click",(()=>this._handleLikeClick(this.likebutton))),this.cardTrashButton.addEventListener("click",(()=>{this._handleTrashClick()})),this.cardImage.addEventListener("click",(()=>{this._handleImageClick()}))}generateCard(){this._element=this._getTemplate(),this.likeButton=this._element.querySelector(".card__like-button"),this.cardTrashButton=this._element.querySelector(".card__trash-button"),this.cardImage=this._element.querySelector(".card__image");const e=this._element.querySelector(".card__title");return this.cardImage.src=this._link,this.cardImage.alt=this._name,e.textContent=this._name,this._setEventListeners(),this._element}}class s{constructor(e){let{popupSelector:t}=e;this._popupElement=document.querySelector(t),this._handleEscClose=this._handleEscClose.bind(this)}open(){this._popupElement.classList.add("popup_opened"),document.addEventListener("keydown",this._handleEscClose)}close(){this._popupElement.classList.remove("popup_opened"),document.removeEventListener("keydown",this._handleEscClose)}_handleEscClose(e){"Escape"===e.key&&this.close()}setEventListeners(){this._popupElement.addEventListener("mousedown",(e=>{(e.target.classList.contains("popup")||e.target.classList.contains("popup__closebutton"))&&this.close()}))}}var n=class extends s{constructor(e,t){super({popupSelector:e}),this._popupForm=this._popupElement.querySelector(".popup__form"),this._handleFormSubmit=t}_getInputValue(){const e=this._popupForm.querySelectorAll(".popup__input"),t={};return e.forEach((e=>{t[e.name]=e.value})),t}setEventListeners(){super.setEventListeners(),this._popupForm.addEventListener("submit",(()=>this._handleFormSubmit(this._getInputValue())))}close(){this._popupForm.reset(),super.close()}};const o=[{name:"Yosemite Valley",link:"https://code.s3.yandex.net/web-code/yosemite.jpg"},{name:"Lake Louise",link:"https://code.s3.yandex.net/web-code/lake-louise.jpg"},{name:"Bald mountains",link:"https://code.s3.yandex.net/web-code/bald-mountains.jpg"},{name:"Latemar",link:"https://code.s3.yandex.net/web-code/latemar.jpg"},{name:"Vanoise National Park",link:"https://code.s3.yandex.net/web-code/vanoise.jpg"},{name:"Lago di Braies",link:"https://code.s3.yandex.net/web-code/lago.jpg"}],r=document.querySelector("#modal"),i=document.querySelector(".profile__edit-button"),l=r.querySelector("#modal-closebutton"),a=r.querySelector("#modal-form"),c=(document.querySelector(".profile__title"),document.querySelector(".profile__description"),document.querySelector("#popup-name")),u=document.querySelector("#popup-description"),p=document.querySelector("#add-popup"),d=document.querySelector(".profile__add-button");console.log(p),p.querySelector("#add-popupclosebutton");const _=p.querySelector("#add-popupform"),m=(document.querySelector("#popup-image"),document.querySelector("#popup-text"),document.querySelector("#preview-popup")),h=m.querySelector("#popup-closebutton"),E=document.querySelector(".cards__list"),b=(document.querySelector("#card-template").content.firstElementChild,{inputSelector:".popup__input",submitButtonSelector:".popup__button",inactiveButtonClass:"popup__button_disabled",inputErrorClass:"popup__input_type_error",errorClass:"popup__error_visible"}),y=(new Api({baseUrl:"https://around.nomoreparties.co/v1/group-12",headers:{authorization:"192a5b57-9b62-4192-96d6-217d99b33573","Content-Type":"application/json"}}),new e(_,b));y.enableValidation(),console.log(_);const v=new e(a,b);v.enableValidation();const S=new class{constructor(e){let{nameSelector:t,jobSelector:s}=e;this._nameEl=document.querySelector(t),this._jobEl=document.querySelector(s)}getUserInfo(){return{name:this._nameEl.textContent,job:this._jobEl.textContent}}setUserInfo(e){let{name:t,job:s}=e;this._nameEl.textContent=t,this._jobEl.textContent=s}}({nameSelector:".profile__title",jobSelector:".profile__description"}),g=new class{constructor(e,t){let{items:s,renderer:n}=e;this._items=s,this._renderer=n,this._container=document.querySelector(t)}renderItems(){this._items.forEach((e=>{this._renderer(e)}))}addItem(e){this._container.prepend(e)}}({items:o,renderer:C},".cards__list");g.renderItems();const f=new n("#modal",(e=>{S.setUserInfo({name:e.name,job:e.description}),f.close()}));f.setEventListeners();const k=new n("#add-popup",(e=>{const t=C(e);g.addItem(t),k.close()}));k.setEventListeners();const L=new class extends s{constructor(e){super({popupSelector:e}),this._image=document.querySelector("#popup-image"),this._text=document.querySelector("#popup-text")}open(e){let{link:t,name:s}=e;this._image.src=t,this._image.alt=s,this._text.textContent=s,super.open()}}("#preview-popup");function C(e){return new t(e,"#card-template",(()=>{L.open(e)})).generateCard()}L.setEventListeners(),o.forEach((e=>{const t=C(e);E.append(t)})),i.addEventListener("click",(function(){const{name:e,job:t}=S.getUserInfo();c.value=e,u.value=t,v.resetValidation(),f.open(r)})),d.addEventListener("click",(()=>{y.resetValidation(),k.open()})),l.addEventListener("click",(function(){f.close(r)})),h.addEventListener("click",(()=>{closeModal(m)}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,